# 詳細設計書 (コード設計書): md-wbs2gantt.ps1 (または md-wbs2markwhen.ps1) - 要件定義書v4.0対応版

script_information:
  name: "md-wbs2gantt.ps1" # Markwhen特化なので、md-wbs2markwhen.ps1 へのリネームも引き続き検討
  version: "3.0" # 要件定義書v4.0に対応した大幅な仕様変更を反映
  creation_date: "2025-05-16"
  created_by: "AI Assistant (Gemini) based on user requirements and existing code"
  target_powershell_version: "7.0 (YAML解析には7.3+またはpowershell-yamlモジュール推奨)"
  description: |
    階層ID付き見出しと属性リストを用いた拡張MD-WBSファイルを解析し、
    タスクの開始日と終了日を逆算（土日祝除外）して、Markwhen形式のタイムラインデータを出力する。
    YAMLフロントマターの簡易パースにも対応。

purpose: |
  ローカル環境で完結するテキストベースのプロジェクト計画 (逆線表) 立案を支援する。
  VS Code と連携し、構造化されたMD-WBS から表現力豊かなMarkwhenタイムラインを生成するプロセスを自動化する。

input_parameters:
  - name: "WbsFilePath"
    type: "string"
    mandatory: true
    description: "拡張MD-WBSデータが記述されたMarkdownファイルのパス。"
  - name: "OfficialHolidayFilePath"
    type: "string"
    mandatory: true
    description: "国民の祝日などが記載されたCSVファイルのパス。"
  - name: "CompanyHolidayFilePath"
    type: "string"
    mandatory: false
    description: "会社独自の休日が記載されたCSVファイルのパス。"
  - name: "OutputFilePath"
    type: "string"
    mandatory: true
    description: "生成されるMarkwhenデータを出力するファイルのパス。"
  - name: "OutputFormat"
    type: "string"
    mandatory: true
    validation: "Markwhen" # Markwhenに特化
    default_value: "Markwhen"
    description: "出力するガントチャートの形式。『Markwhen』のみをサポート。"
  - name: "DateFormatPattern"
    type: "string"
    mandatory: false
    default_value: "yyyy-MM-dd"
    description: "Markwhen内で使用する日付の書式。"
  - name: "DefaultEncoding"
    type: "string"
    mandatory: false
    default_value: "UTF8" # 出力はUTF8NoBOMを推奨
    description: "入出力ファイルのデフォルトエンコーディング。"
  - name: "MarkwhenHolidayDisplayMode"
    type: "string"
    mandatory: false
    validation: "All, InRange, None"
    default_value: "InRange"
    description: "Markwhen出力時の祝日表示モード。"

output_specifications:
  file_path: "入力パラメータ `OutputFilePath` で指定されたパス"
  format: "Markwhenテキスト形式"
  encoding: "UTF8NoBOM (推奨)"
  content_details:
    front_matter: |
      MD-WBSのYAMLフロントマターから抽出した `title`, `description`, `date`, `view` を
      Markwhenファイルの先頭に `---` で区切られたYAML形式で出力する。
    sections_and_groups: |
      MD-WBSの見出し階層を、Markwhenの `section 要素名` およびネストされた `group "要素名"` と
      対応する `endsection`, `endgroup` で表現する。インデントはスペース4つ単位で厳密に制御。
    task_lines:
      format: "`CalculatedStartDate/CalculatedEndDate: 要素名 (Progress%) #ID #Status #Assignee` の形式。"
      indentation: "MD-WBS内の見出し階層とタスクのインデントを正確にMarkwhenのインデントに反映。"
    notes: "MD-WBSの見出し直下の本文（説明）は、Markwhenのノート (`// 説明内容`) としてタスク行の下に関連付ける。"
    holidays: "`MarkwhenHolidayDisplayMode` に基づき、フィルタリングされた祝日をファイルの最後に独立した `section 祝日` 内の `group Holidays` として出力する。"

main_processing_flow:
  - step: 1
    action: "パラメータ検証とグローバル変数初期設定"
    details: "`$Global:DateFormatPattern` の設定など。"
  - step: 2
    action: "祝日リストの読み込みとマージ (`Import-HolidayList` 関数)"
    details: "複数のCSVファイルを処理し、重複排除された祝日日付のリストを生成。"
  - step: 3
    action: "拡張MD-WBSファイルの解析 (`Parse-WbsMarkdownAndMetadataAdvanced` 関数)"
    details: |
      - YAMLフロントマターをパースし、`ProjectMetadata` オブジェクトに格納 (`ConvertFrom-Yaml` 利用可なら使用、不可なら簡易パース)。
      - Markdown本文を解析し、階層ID付き見出し、1段インデントされた属性リスト、見出し直後の本文を抽出し、
        `WbsElementNode` のツリー構造 (`$rootElements`) を構築する。
  - step: 4
    action: "日付計算対象タスクのフラット化 (`Flatten-WbsTreeNodes` 関数)"
    details: "WBSツリーから、`DurationDays` と `Deadline` を持つ要素をフラットなリスト (`$Global:AllTaskNodesFlatList`) に抽出。"
  - step: 5
    action: "各タスクの開始日と終了日の計算"
    details: |
      - フラット化された各タスクノードに対し、`Calculate-TaskStartDate` で開始日を逆算。
      - 次に `Calculate-TaskEndDate` で、計算された開始日と期間から実際の終了日を計算。
      - 結果を各タスクノードの `CalculatedStartDate`, `CalculatedEndDate` プロパティに格納。
  - step: 6
    action: "プロジェクト全体期間の特定 (祝日フィルタ用)"
    details: "`ProjectMetadata` の情報と、計算されたタスク日付範囲から、祝日表示フィルタリング用の全体期間を決定。"
  - step: 7
    action: "依存関係のチェックと警告"
    details: "計算されたタスク日付に基づき、先行タスクの終了日以前に後続タスクが開始する計画矛盾を検出し警告。"
  - step: 8
    action: "Markwhen形式テキストデータの生成 (`Format-GanttMarkwhen` 関数)"
    details: "`ProjectMetadata` とWBSツリー (`$rootElements`) から、Markwhen構文の文字列を生成。"
  - step: 9
    action: "出力ファイルへの書き込み"
    details: "生成されたMarkwhen文字列を、指定されたエンコーディング (UTF8NoBOM推奨) でファイルに出力。"
  - step: 10
    action: "処理結果の表示と終了"
    details: "依存関係の警告サマリーなどを表示。"

internal_data_structures:
  ProjectMetadata_Class:
    name: "ProjectMetadata"
    properties:
      - name: "Title"; type: "string"
      - name: "Description"; type: "string"
      - name: "DefinedDate"; type: "System.DateTime"
      # - name: "Tags"; type: "string[]" # 仕様から削除
      - name: "ProjectPlanStartDate"; type: "System.DateTime"
      - name: "ProjectPlanOverallDeadline"; type: "System.DateTime"
      - name: "View"; type: "string"; default: "month"
  WbsElementNode_Class:
    name: "WbsElementNode"
    properties:
      - name: "Id"; type: "string"; description: "階層的ID (例: 1.1.1)"
      - name: "Name"; type: "string"; description: "見出しのテキスト部分 (ID除去後)"
      - name: "HierarchyLevel"; type: "int"; description: "Markdownの見出しレベル"
      - name: "ElementType"; type: "string"; description: "Section, Group, Task"
      - name: "Attributes"; type: "System.Collections.Hashtable"; description: "パースされた属性 (キーは小文字)"
      - name: "DescriptionText"; type: "string"; description: "見出し直下のMarkdown本文"
      - name: "Deadline"; type: "System.DateTime"
      - name: "DurationDays"; type: "int"; default: 0
      - name: "CalculatedStartDate"; type: "System.DateTime"
      - name: "CalculatedEndDate"; type: "System.DateTime"
      - name: "Children"; type: "System.Collections.Generic.List[WbsElementNode]"
      - name: "Parent"; type: "WbsElementNode"
      - name: "RawAttributeLines"; type: "string[]"; description: "パース前の一時的な属性行バッファ"
    methods:
      - name: "AddRawAttributeLine"; params: "[string]$Line"; description: "属性行候補をバッファに追加"
      - name: "ParseCollectedAttributes"; description: "バッファされた属性行を解析しAttributesハッシュテーブルと専用プロパティに格納。dependsの末尾ドット除去、値のコメント除去も行う。"

key_functions_design:
  - function_name: "Import-HolidayList"
    description: "指定された祝日CSVファイル群を読み込み、日付リストをマージして返す。"
    inputs:
      - name: "InputOfficialHolidayFilePath"; type: "string"
      - name: "InputCompanyHolidayFilePath"; type: "string"; optional: true
      - name: "BaseEncoding"; type: "string"
    outputs:
      - type: "System.Collections.Generic.List[System.DateTime]"
    core_logic: |
      - 各CSVファイルを指定エンコーディング (Shift_JISフォールバックあり) で `Get-Content`。
      - BOM除去処理。
      - 1行目をヘッダとしてスキップし、`ConvertFrom-Csv -Header "日付", "名称"` でパース。
      - 日付列を `[datetime]` に変換し、`HashSet[datetime]` で重複排除しつつマージ。
  - function_name: "Parse-WbsMarkdownAndMetadataAdvanced"
    description: "拡張MD-WBS Markdownファイルを解析し、プロジェクトメタ情報とWbsElementNodeのツリーを生成する。"
    inputs:
      - name: "FilePath"; type: "string"
      - name: "Encoding"; type: "string"
    outputs:
      - type: "System.Collections.Hashtable" # @{ ProjectMetadata = $meta; RootElements = $roots }
    core_logic: |
      - ファイル先頭のYAMLフロントマターを識別。`ConvertFrom-Yaml` が利用可能なら使用、不可ならキーバリュー行として簡易パース。結果を `ProjectMetadata` オブジェクトに格納。
      - Markdown本文を行ごとに処理:
        - 見出し行 (`^#+\s+[\d\.]*\d\.?\s*.+`) を正規表現で検出し、階層ID、要素名、レベルを取得。`WbsElementNode` を生成。
        - `HierarchyLevel` に基づき `ElementType` (Section, Group, Task) を仮決定。
        - 親子関係をスタックで解決し、`WbsElementNode` のツリー (`$rootElements` と `Children`) を構築。
        - 現在処理中の見出し要素 (`$currentWbsElement`) を追跡。
        - 見出しの直後に続く1段インデントされたリストアイテム (`^\s{4}-\s*(keyword):\s*.+`) を属性行としてバッファ (`$attributeLinesBuffer`) に一時保存。
        - 見出しの直後で属性リストでも新しい見出しでもない行を本文 (`$descriptionBuffer`) として収集。
        - 新しい見出しが現れるか、空行などで要素の区切りと判断した時点で、バッファされた属性行を `$currentWbsElement.ParseCollectedAttributes()` で処理し、本文を `$currentWbsElement.DescriptionText` に設定。
  - function_name: "Calculate-TaskStartDate"
    description: "締切日と所要営業日数、祝日リストからタスクの開始日を逆算する。"
    inputs: "[datetime]$DeadlineDate", "[int]$DurationBusinessDays", "[System.Collections.Generic.List[datetime]]$Holidays"
    outputs: "[datetime]"
    core_logic: "締切日から1日ずつ過去に遡り、土日祝を除外して営業日数をカウントダウン。"
  - function_name: "Calculate-TaskEndDate"
    description: "開始日と所要営業日数、祝日リストからタスクの終了日を計算する。"
    inputs: "[datetime]$StartDate", "[int]$DurationBusinessDays", "[System.Collections.Generic.List[datetime]]$Holidays"
    outputs: "[datetime]"
    core_logic: "開始日を基点とし、土日祝を除外しながら営業日数をカウントアップして終了日を決定。開始日自身が営業日なら1日目としてカウント。"
  - function_name: "Format-GanttMarkwhen"
    description: "ProjectMetadataとWbsElementNodeツリーからMarkwhen構文の文字列を生成する。"
    inputs: "[ProjectMetadata]$Metadata", "[System.Collections.Generic.List[WbsElementNode]]$RootWbsElements", "[string]$DatePattern", "[System.Collections.Generic.List[datetime]]$Holidays", "[datetime]$ProjectOverallStartDateForHolidayFilter", "[datetime]$ProjectOverallEndDateForHolidayFilter", "[string]$HolidayDisplayMode"
    outputs: "[string]"
    core_logic: |
      - `ProjectMetadata` からMarkwhenフロントマター (title, description, date, view) を生成。
      - **`ConvertTo-MarkwhenRecursiveUpdated` (ネストされたヘルパー関数):**
        - WbsElementNodeツリーを再帰的に処理。
        - `$Element.ElementType` と `$Element.Children.Count` に基づき、`section`, `group "要素名"`, `endgroup`, `endsection` を適切なインデントで出力。
        - 子を持つTask要素は `group "タスク名"` とし、その中に「概要」タイムラインエントリと子タスクを出力。
        - 子を持たないTask要素はタイムラインエントリ (`CalculatedStartDate/CalculatedEndDate: 要素名 (Progress%) #ID #Status #Assignee`) として出力。
        - IDのドットはアンダースコアに置換。
        - `DescriptionText` があればノート (`// 説明`) として出力。
      - 最後に、`HolidayDisplayMode` に基づきフィルタリングされた祝日を独立した `section 祝日` 内の `group Holidays` として出力。

error_handling: # (既存コードのtry-catchベースを踏襲)
  - type: "File I/O, Parameter Validation, Data Parsing, General Errors"
  logging_and_messages: "Write-Error, Write-Warning, Write-Verbose, Write-Host を適切に使用。"

file_encoding_considerations: # (既存コードのエンコーディング処理を踏襲)
  input_wbs: "`DefaultEncoding` パラメータで指定。UTF-8推奨。"
  input_holidays_csv: "`DefaultEncoding` を基本としつつ、Shift_JISフォールバックを試みる。"
  output_gantt: "`DefaultEncoding` パラメータで指定 (UTF8NoBOM推奨)。"

assumptions_and_constraints:
  - "PowerShell 7.0+ 環境。"
  - "入力MD-WBSファイルは定義された書式に従う（特に見出し先頭ID、属性リストの1段インデント）。"
  - "Markwhenのインデント規則（スペース4つ単位）を厳密に守って出力。"
  - "依存関係は単一先行タスクを基本とし、複雑な依存関係解決やリソース平準化は行わない。"